/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Kasir;

import app.Koneksi;
import app.UserProfile;
import java.awt.event.KeyEvent;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.util.Date;
import javax.swing.JOptionPane;
import javax.swing.event.TableModelEvent;
import javax.swing.event.TableModelListener;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author asus
 */
public class Transaksi1 extends javax.swing.JFrame {
    private PreparedStatement stat;
    private ResultSet rs;
    UserProfile up;



//    DefaultTableModel model = (DefaultTableModel) tblCart.getModel();

    public Transaksi1() {
        initComponents();
        txtID.requestFocus();
        setExtendedState(java.awt.Frame.MAXIMIZED_BOTH);
        getProfile(up);

    }
    public Transaksi1(UserProfile up) {
        this.up = up;
        getProfile(up);
        initComponents();
        txtID.requestFocus();
        setExtendedState(java.awt.Frame.MAXIMIZED_BOTH);
        nama_kasir.setText(up.getNama_lengkap());
        System.out.println(up.getNama_lengkap());

    }
    private void getProfile(UserProfile up) {
        try {
            Connection conn = Koneksi.Go();
            this.stat = conn.prepareStatement("SELECT * FROM profil WHERE id_akun=?;");
            if (up != null) {
                this.stat.setInt(1, up.getId_akun());
            } else {
                System.out.println("UserProfile null! Tidak dapat mengambil profil.");
                return;
            }
            this.rs = this.stat.executeQuery();

            if (!rs.next()) {
                System.out.println("Tidak ada data profil ditemukan untuk ID Akun: " + up.getId_akun());
            } else {
                do {
                    up.setNama_lengkap(rs.getString("nama_lengkap"));
                    up.setAlamat(rs.getString("alamat"));
                    up.setId_profil(rs.getInt("id_profil"));
                    up.setNo_hp(rs.getString("nomor_telepon"));
                    up.setPath_gambar(rs.getString("path_gambar"));
//                    this.path_gambar = (rs.getString("path_gambar"));
//                    this.nama_lengkap = rs.getString("nama_lengkap");
                } while (rs.next());
                System.out.println("Profil berhasil dimuat: " + up.getNama_lengkap());
            }
        } catch (Exception e) {
            e.printStackTrace();  // Tampilkan kesalahan jika ada
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        txtID = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        lblTotalHarga = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        lblKembali = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        jTextField1 = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        nama_kasir = new javax.swing.JLabel();
        jButton3 = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblCart = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        txtID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtIDActionPerformed(evt);
            }
        });
        txtID.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtIDKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtIDKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtIDKeyTyped(evt);
            }
        });

        jLabel1.setText("Product");

        jButton1.setBackground(new java.awt.Color(255, 0, 0));
        jButton1.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jButton1.setForeground(new java.awt.Color(255, 255, 255));
        jButton1.setText("DEL");
        jButton1.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        lblTotalHarga.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        lblTotalHarga.setForeground(new java.awt.Color(0, 0, 255));
        lblTotalHarga.setText("Rp 0");

        jLabel2.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel2.setText("Total      :");

        jLabel4.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel4.setText("Kembali : ");

        lblKembali.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        lblKembali.setForeground(new java.awt.Color(0, 0, 255));
        lblKembali.setText("Rp 0,-");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addComponent(jLabel4))
                .addGap(24, 24, 24)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(lblKembali, javax.swing.GroupLayout.PREFERRED_SIZE, 465, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(129, 129, 129)
                        .addComponent(jButton1)
                        .addGap(34, 34, 34)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtID, javax.swing.GroupLayout.DEFAULT_SIZE, 220, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(lblTotalHarga, javax.swing.GroupLayout.PREFERRED_SIZE, 756, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap(14, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblTotalHarga, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(txtID, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel1))
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel4)
                        .addComponent(lblKembali))
                    .addComponent(jButton1))
                .addGap(16, 16, 16))
        );

        getContentPane().add(jPanel1, java.awt.BorderLayout.PAGE_START);

        jPanel4.setPreferredSize(new java.awt.Dimension(746, 120));

        jLabel3.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel3.setText("Uang Pembayaran");

        jButton2.setBackground(new java.awt.Color(255, 102, 51));
        jButton2.setFont(new java.awt.Font("Segoe UI", 1, 28)); // NOI18N
        jButton2.setForeground(new java.awt.Color(255, 255, 255));
        jButton2.setText("Checkout");
        jButton2.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });
        jTextField1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTextField1KeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTextField1KeyReleased(evt);
            }
        });

        jLabel5.setText("Kasir : ");

        nama_kasir.setText("nama kasir");

        jButton3.setText("Laporan Penjualan");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jButton3)
                        .addGap(110, 110, 110)
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 191, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(36, 36, 36)
                        .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 323, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addGap(18, 18, 18)
                        .addComponent(nama_kasir, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 7, Short.MAX_VALUE)
                .addComponent(jButton2)
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(41, Short.MAX_VALUE))
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(nama_kasir))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton3)
                .addGap(33, 33, 33))
        );

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, 958, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(123, 123, 123))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(28, Short.MAX_VALUE))
        );

        getContentPane().add(jPanel2, java.awt.BorderLayout.PAGE_END);

        jPanel3.setLayout(new java.awt.BorderLayout());

        tblCart.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "NAMA PRODUK", "QTY", "HARGA", "HARGA TOTAL"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, true, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblCart);

        jPanel3.add(jScrollPane1, java.awt.BorderLayout.CENTER);

        getContentPane().add(jPanel3, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        //simpan transaksi penjualan ke db
        checkout();
       
    }//GEN-LAST:event_jButton2ActionPerformed

    private void txtIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtIDActionPerformed
        String kode = txtID.getText();
        DefaultTableModel model = (DefaultTableModel) tblCart.getModel();

        try {
            // Tambahkan listener untuk mendeteksi perubahan tabel
            model.addTableModelListener(new TableModelListener() {
            @Override
            public void tableChanged(TableModelEvent e) {
            int row = e.getFirstRow();
            int column = e.getColumn();

            // Periksa apakah kolom kuantitas yang berubah
            if (column == 2 && row >= 0) {
                try {
                    int qty = Integer.parseInt(tblCart.getValueAt(row, 2).toString());
                    double price = Double.parseDouble(tblCart.getValueAt(row, 3).toString());
                    int availableStock = Integer.parseInt(tblCart.getValueAt(row, 0).toString()); // Asumsikan stok produk diketahui dari tabel

                    // Pastikan kuantitas positif dan stok mencukupi
                    if (qty > 0) {
                        if (qty <= availableStock) {
                            tblCart.setValueAt(qty * price, row, 4); // Update harga total
                            updateharga();
                        } else {
                            JOptionPane.showMessageDialog(null, "Stok tidak mencukupi!");
                            tblCart.setValueAt(1, row, 2); // Reset ke nilai default
                        }
                    } else {
                        JOptionPane.showMessageDialog(null, "Kuantitas harus lebih dari 0!");
                        tblCart.setValueAt(1, row, 2); // Reset ke nilai default
                    }
                } catch (NumberFormatException ex) {
                    JOptionPane.showMessageDialog(null, "Kuantitas tidak valid!");
                    tblCart.setValueAt(1, row, 2); // Reset ke nilai default
                }
            }
            }
            });
            // Koneksi ke database
            Connection K = Koneksi.Go();
            String query = "SELECT id_produk, nama_produk, harga_jual, stok FROM produk WHERE kode_produk = ?";
            PreparedStatement ps = K.prepareStatement(query);
            ps.setLong(1, Long.parseLong(kode)); // Pastikan kode dikonversi ke tipe Long
            ResultSet R = ps.executeQuery();

            // Proses setiap hasil query
            while (R.next()) {
                int id = R.getInt("id_produk");
                String pName = R.getString("nama_produk");
                double pPr = R.getDouble("harga_jual");
                int availableStock = R.getInt("stok"); // Ambil jumlah stok dari database
                System.out.println(pName);
                // Cek apakah produk sudah ada di keranjang
                int rowCount = tblCart.getRowCount();
                boolean exists = false;
                int rowIndex = -1;

                for (int i = 0; i < rowCount; i++) {
                    int currentId = Integer.parseInt(tblCart.getValueAt(i, 0).toString());
                    if (currentId == id) {
                        exists = true;
                        rowIndex = i;
                        break;
                    }
                }

            if (exists) {
                // Jika produk sudah ada, tambah kuantitas dan perbarui total harga
                int currentQty = Integer.parseInt(tblCart.getValueAt(rowIndex, 2).toString());
                int newQty = currentQty + 1;

                // Cek apakah stok mencukupi
                if (newQty <= availableStock) {
                    tblCart.setValueAt(newQty, rowIndex, 2); // Update kuantitas
                    tblCart.setValueAt(newQty * pPr, rowIndex, 4); // Update total harga
                } else {
                    JOptionPane.showMessageDialog(this, "Stok tidak mencukupi! Hanya tersedia " + availableStock + " produk.");
                }
            } else {
                // Jika produk belum ada, tambahkan baris baru
                if (availableStock > 0) {
                    Object[] data = {id, pName, 1, pPr, pPr};
                    model.addRow(data);
                } else {
                    JOptionPane.showMessageDialog(this, "Stok tidak tersedia untuk produk: " + pName);
                }
            }
        }

        updateharga();

        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, e.getMessage());
        }

        
    }//GEN-LAST:event_txtIDActionPerformed

    private void txtIDKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtIDKeyPressed
        int keyCode = evt.getKeyCode();
        if(keyCode == KeyEvent.VK_F4){
            jTextField1.setText("");
            jTextField1.requestFocus();
        }
//        addd_to_cart();
    }//GEN-LAST:event_txtIDKeyPressed

    private void txtIDKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtIDKeyTyped
//        addd_to_cart();
    }//GEN-LAST:event_txtIDKeyTyped

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        removeProductFromCart();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jTextField1KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField1KeyReleased
        String val = jTextField1.getText();
        if(!val.isEmpty()){
            int bayar = Integer.parseInt(val);
            String TH = lblTotalHarga.getText();
            String[] arrTH = TH.split(" ");
            int totalH = Integer.parseInt(arrTH[1]);
            if(bayar >= totalH){
                long sisa = bayar-totalH;
                lblKembali.setText("Rp "+sisa);
                enableCheckoutBtn(true);
            }else{
                lblKembali.setText("Rp 0");
                enableCheckoutBtn(false);
            }
        }else{
            lblKembali.setText("Rp 0");
            enableCheckoutBtn(false);
        }
    }//GEN-LAST:event_jTextField1KeyReleased

    private void jTextField1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField1KeyPressed
        int keyCode = evt.getKeyCode();
        if(keyCode == KeyEvent.VK_F3){
            txtID.setText("");
            txtID.requestFocus();
        }
    }//GEN-LAST:event_jTextField1KeyPressed

    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField1ActionPerformed
        // TODO add your handling code here:
        checkout();
    }//GEN-LAST:event_jTextField1ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        LaporanHarian LH = new LaporanHarian();
        LH.setVisible(true);
  
    }//GEN-LAST:event_jButton3ActionPerformed

    private void txtIDKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtIDKeyReleased
        // TODO add your handling code here:
//        addd_to_cart();
//    if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
//        txtIDActionPerformed(null); // Panggil event ActionPerformed
//    }
    }//GEN-LAST:event_txtIDKeyReleased
     
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Transaksi1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Transaksi1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Transaksi1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Transaksi1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Transaksi1().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JLabel lblKembali;
    private javax.swing.JLabel lblTotalHarga;
    private javax.swing.JLabel nama_kasir;
    private javax.swing.JTable tblCart;
    private javax.swing.JTextField txtID;
    // End of variables declaration//GEN-END:variables

    private void enableCheckoutBtn(boolean b) {
        if(b){
            jButton2.setEnabled(b); 
        }else{
            jButton2.setEnabled(b); 
        }
    }

    private void updateharga() {
        try {
            double totalHarga = 0;
            int rowcount = tblCart.getRowCount();
            for (int i = 0; i < rowcount; i++) {
                double QTY = Double.parseDouble(tblCart.getValueAt(i, 2).toString());
                double PRC = Double.parseDouble(tblCart.getValueAt(i, 3).toString());
                totalHarga += (QTY * PRC);
            }
            lblTotalHarga.setText("Rp " + (long) totalHarga);
            txtID.setText(""); 
            txtID.requestFocus();
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, e.getMessage());
        }
    }

    private void removeProductFromCart() {
        int idx = tblCart.getSelectedRow();
        if(idx != -1){
            DefaultTableModel m = (DefaultTableModel) tblCart.getModel();
            m.removeRow(idx); 
            updateharga();
        }else {
            JOptionPane.showMessageDialog(this, "Anda belum memilihi data"); 
        }
    }

//    private void checkout() {
//    try {
//            //catat data transaksi
//            Connection K = Koneksi.Go();
//            Statement S = K.createStatement();
//            SimpleDateFormat SDF = new SimpleDateFormat("yyyy-MM-dd");
//            String tgl = SDF.format(new Date());
//            String Q = "INSERT INTO transaksi (tanggal_transaksi) VALUES ('"+tgl+"')";
//            S.executeUpdate(Q);
//
//            //catat data detail transaksi
//            int row = tblCart.getRowCount();
//            for (int i = 0; i < row; i++) {
//                int id = Integer.parseInt(tblCart.getValueAt(row, 0).toString());
//                int QTY = Integer.parseInt(tblCart.getValueAt(row, 2).toString());
//                int Price = Integer.parseInt(tblCart.getValueAt(row, 3).toString());
//
//            }
//        } catch (Exception e) {
//            JOptionPane.showMessageDialog(this, e.getMessage());
//            System.out.println(e.getMessage());
//        }
//
//        Nota N = new Nota(this, false);
//        N.setMODEL( (DefaultTableModel) tblCart.getModel());
//        N.setVisible(true);    }
    private void checkout() {
    Connection K = null;
    PreparedStatement insertTransaksi = null;
    PreparedStatement insertDetailTransaksi = null;
    PreparedStatement updateStok = null;
    String uang_kembali = lblKembali.getText();
    String uang_pembayaran = jTextField1.getText();
    try {
        // Mulai koneksi dan nonaktifkan auto-commit
        K = Koneksi.Go();
        K.setAutoCommit(false);

        // Ambil tanggal transaksi
        SimpleDateFormat SDF = new SimpleDateFormat("yyyy-MM-dd");
        String tanggalTransaksi = SDF.format(new Date());

        // Data kasir
        int idKasir = up.getId_akun();
        System.out.println(up.getId_akun());
// Asumsi ID kasir disimpan di UserProfile

        // Hitung total harga dari keranjang
        DefaultTableModel model = (DefaultTableModel) tblCart.getModel();
        double totalTransaksi = 0;
        for (int i = 0; i < model.getRowCount(); i++) {
            int qty = Integer.parseInt(model.getValueAt(i, 2).toString());
            double harga = Double.parseDouble(model.getValueAt(i, 3).toString());
            totalTransaksi += qty * harga;
        }

        // Masukkan data ke tabel transaksi
        String insertTransaksiQuery = "INSERT INTO transaksi (id_akun, tanggal_transaksi, total_harga) VALUES (?, ?, ?)";
        insertTransaksi = K.prepareStatement(insertTransaksiQuery, Statement.RETURN_GENERATED_KEYS);
        insertTransaksi.setInt(1, idKasir);
        insertTransaksi.setString(2, tanggalTransaksi);
        insertTransaksi.setDouble(3, totalTransaksi);
        insertTransaksi.executeUpdate();

        // Ambil ID transaksi yang baru saja dibuat
        ResultSet rs = insertTransaksi.getGeneratedKeys();
        int idTransaksi = 0;
        if (rs.next()) {
            idTransaksi = rs.getInt(1);
        }

        // Masukkan data ke tabel detail_transaksi
        String insertDetailTransaksiQuery = "INSERT INTO transaksi_detail (id_transaksi, id_produk, id_kasir, jumlah_produk, harga_satuan, total_harga_produk, tanggal_transaksi) VALUES (?, ?, ?, ?, ?, ?, ?)";
        insertDetailTransaksi = K.prepareStatement(insertDetailTransaksiQuery);

        String updateStokQuery = "UPDATE produk SET stok = stok - ? WHERE id_produk = ?";
        updateStok = K.prepareStatement(updateStokQuery);

        for (int i = 0; i < model.getRowCount(); i++) {
            int idProduk = Integer.parseInt(model.getValueAt(i, 0).toString());
            int qty = Integer.parseInt(model.getValueAt(i, 2).toString());
            double harga = Double.parseDouble(model.getValueAt(i, 3).toString());
            double totalHargaDetail = qty * harga;

            // Masukkan detail transaksi
            insertDetailTransaksi.setInt(1, idTransaksi);
            insertDetailTransaksi.setInt(2, idProduk);
            insertDetailTransaksi.setInt(3, idKasir);
            insertDetailTransaksi.setInt(4, qty);
            insertDetailTransaksi.setDouble(5, harga);
            insertDetailTransaksi.setDouble(6, totalHargaDetail);
            insertDetailTransaksi.setString(7, tanggalTransaksi);
            insertDetailTransaksi.executeUpdate();

            // Update stok produk
            updateStok.setInt(1, qty);
            updateStok.setInt(2, idProduk);
            updateStok.executeUpdate();
        }

        // Commit transaksi
        K.commit();

        // Tampilkan pesan sukses
//        JOptionPane.showMessageDialog(this, "Checkout berhasil!");
        Nota nota = new Nota(this, true);
//        nota.setData(up.getNama_lengkap(), tanggalTransaksi, String.valueOf(idTransaksi), totalTransaksi, (DefaultTableModel) tblCart.getModel(),uang_kembali, uang_pembayaran);
        nota.setData(up.getNama_lengkap(), tanggalTransaksi, idTransaksi, totalTransaksi, model, uang_kembali, uang_pembayaran);
        nota.setVisible(true);

        // Reset tabel keranjang
        model.setRowCount(0);
    } catch (SQLException e) {
        // Rollback jika terjadi kesalahan
        if (K != null) {
            try {
                K.rollback();
                JOptionPane.showMessageDialog(this, "Terjadi kesalahan. Transaksi dibatalkan: " + e.getMessage());
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(this, "Gagal melakukan rollback: " + ex.getMessage());
            }
        }
    } finally {
        // Tutup semua resource
        try {
            if (insertTransaksi != null) insertTransaksi.close();
            if (insertDetailTransaksi != null) insertDetailTransaksi.close();
            if (updateStok != null) updateStok.close();
            if (K != null) K.setAutoCommit(true); // Kembalikan ke auto-commit
            if (K != null) K.close();
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Gagal menutup koneksi: " + e.getMessage());
        }
    }
}

    private void addd_to_cart() {
       

    }



}
